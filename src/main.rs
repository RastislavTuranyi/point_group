#![allow(unused_variables)]
#![allow(unused_imports)]

use point_group::*;
use geometry::*;
use utils::*;
use std::f64::consts::PI;

fn main() {
    /* let l1 = Line::from_points(Point::new(2_f64.sqrt()/4.0, (2_f64.sqrt()-2.0)/4.0, 0.0), Point::new(-2_f64.sqrt()/4.0, (2.0-2_f64.sqrt())/4.0, 0.0));
    let l2 = Line::from_points(Point::new(2_f64.sqrt()/4.0, (2_f64.sqrt()-2.0)/4.0, 0.0),  Point::new(-2_f64.sqrt()/2.0, 0.0, 0.0));
    let l3 = Line::from_points(Point::new(2_f64.sqrt()/4.0, (2_f64.sqrt()-2.0)/4.0, 0.0), Point::new(-2_f64.sqrt()/4.0, (-2.0+2_f64.sqrt())/4.0, 0.0));
    
    println!("l1=l2 {} l1=l3 {}, l2=l3 {}", l1==l2, l1==l3, l2==l3); */

    /* let l1 = Line { point: Point { x: 0.0, y: 1.0, z: 0.0 }, vector: Vector { x: -3.700743415417188e-17, y: -0.2510067987608444, z: 0.0 } };
    let l2 = Line { point: Point { x: 0.0, y: 1.0, z: 0.0 }, vector: Vector { x: 0.0, y: -0.8150139559708763, z: 0.0 } };
    println!("{}, {}", l2.has_point(l1.point), l1.vector.is_k_multiple(l2.vector)); */

    /* let coordinates = vec!(Point::new(0.0, 2.0, 0.0), Point::new(2.0*(2.0 * PI / 5.0).sin(), 2.0*(2.0 * PI / 5.0).cos(), 0.0), 
    Point::new(2.0*(4.0 * PI / 5.0).sin(), -2.0*(PI / 5.0).cos(), 0.0),  Point::new(-2.0*(4.0 * PI / 5.0).sin(), -2.0*(PI / 5.0).cos(), 0.0), 
    Point::new(-2.0*(2.0 * PI / 5.0).sin(), 2.0*(2.0 * PI / 5.0).cos(), 0.0));
    //println!("{:?}", &coordinates);
    //println!("{:?}", has_plane_reflection_symmetry(&coordinates, &Plane { point: Point { x: -1.708035422500241e-17, y: -4.2700885562506023e-17, z: 0.0 }, normal: Vector { x: 0.0, y: -9.184850993605148e-17, z: -1.0 } }));
    //println!("{}", find_point_group(coordinates, 2));
    let x = Line::new(Point::new(0.0, 0.0, 0.0), Vector::new(0.0, 0.0, 1.0));

    for point in coordinates {
        println!("{:?}", point.rotate_around_axis(x, 25.0) * 1.5)
    } */

    //println!("{}", Line { point: Point { x: -0.262190628, y: 3.78191367875, z: 2.09011912275 }, vector: Vector { x: 0.537800388, y: 0.45937334258333395, z: -0.5841187114166668 } }.approx_eq(&Line { point: Point { x: -0.262190628, y: 3.78191367875, z: 2.09011912275 }, vector: Vector { x: 0.26719927066666666, y: 0.22951216991666668, z: -0.29261673008333333 } }, 0.3));

    let coords = vec!(Point::new(0.000000000, 7.217686652, 11.428734326), Point::new(0.000000000, 7.217686652, 6.009265399), 
    Point::new(-1.121563127, 9.518432587, 9.622201030), Point::new(1.121563127, 4.916940716, 7.815798696), 
    Point::new(-1.431722865, 5.096011524, 9.622201030), Point::new(1.431722865, 9.339361779, 7.815798696), 
    Point::new(2.553285991, 7.038615844, 9.622201030), Point::new(-2.553285991, 7.396757460, 7.815798696), 
    Point::new(-0.641071760, 8.609328754, 10.884276381), Point::new(0.641071760, 5.826044549, 6.553723344), 
    Point::new(-0.884661534, 5.966681171, 10.884276381), Point::new(0.884661534, 8.468692133, 6.553723344), 
    Point::new(1.525733293, 7.077050030, 10.884276381), Point::new(-1.525733293, 7.358323273, 6.553723344), 
    Point::new(0.160642915, 9.859359996, 8.684211053), Point::new(-0.160642915, 4.576013308, 8.753788672), 
    Point::new(-2.368077682, 6.035970825, 8.684211053), Point::new(2.368077682, 8.399402479, 8.753788672), 
    Point::new(2.207434767, 5.757729134, 8.684211053), Point::new(-2.207434767, 8.677644169, 8.753788672), 
    Point::new(0.000000000, 7.217686652, 4.175528908), Point::new(1.878335430, 3.349367347, 7.231189701), 
    Point::new(2.410895073, 10.778532503, 7.231189701), Point::new(4.289230503, 6.910213198, 10.206810025), 
    Point::new(-4.289230503, 7.525160105, 7.231189701), Point::new(0.000000000, 7.217686652, 13.262470817), 
    Point::new(-1.878335430, 11.086005957, 10.206810025), Point::new(-2.410895073, 3.656840800, 10.206810025), 
    Point::new(0.919477979, 7.132157069, 3.849874402), Point::new(-0.385668198, 8.056742731, 3.849874402), 
    Point::new(-0.533809781, 6.464160155, 3.849874402), Point::new(1.221386870, 2.843768388, 6.708834522), 
    Point::new(3.177230895, 10.462397841, 6.708834522), Point::new(4.398617765, 6.088479578, 10.729165204), 
    Point::new(-4.398617765, 8.346893726, 6.708834522), Point::new(2.655922399, 3.550740987, 6.669598943), 
    Point::new(4.503629300, 7.684310088, 10.768400783), Point::new(2.163992319, 2.815619579, 8.002298073), 
    Point::new(4.894298073, 6.890725437, 9.435701652), Point::new(1.847706901, 11.351255753, 6.669598943), 
    Point::new(2.730305754, 11.292792510, 8.002298073), Point::new(-4.503629300, 6.751063216, 6.669598943), 
    Point::new(-4.894298073, 7.544647866, 8.002298073), Point::new(0.385668198, 6.378630572, 13.588125323), 
    Point::new(-0.919477979, 7.303216234, 13.588125323), Point::new(0.533809781, 7.971213149, 13.588125323), 
    Point::new(-2.655922399, 10.884632317, 10.768400783), Point::new(-2.163992319, 11.619753724, 9.435701652), 
    Point::new(-1.221386870, 11.591604915, 10.729165204), Point::new(-1.847706901, 3.084117551, 10.768400783), 
    Point::new(-2.730305754, 3.142580794, 9.435701652), Point::new(-3.177230895, 3.972975463, 10.729165204));

    //println!("{}", find_point_group(coords, 2, 0.07))
    /* let atom_1 = Point::from_array([0_f64, 0_f64, 0_f64]);
    let atom_2 = Point::from_array([1_f64, 0_f64, 0_f64]);
    let atom_3 = Point::from_array([2_f64, 0_f64, 0_f64]);
    let coordinates = vec!(atom_1, atom_2, atom_3);
    
    let result = find_point_group(coordinates, 1); */
    //print!("{:?}", result);

    //println!("{}", Line { point: Point { x: -1.3466360139166669, y: 2.7197999955000007, z: 3.592181557 }, vector: Vector { x: 0.49907284291666687, y: 0.49500360949999944, z: -0.02694136250000012 } }.approx_eq(&Line { point: Point { x: -1.3466360139166669, y: 2.7197999955000007, z: 3.592181557 }, vector: Vector { x: 1.6516119229166668, y: 1.5932588154999996, z: -0.08980453999999982 } }, 0.075));
    let coords = vec!(Point::new(0.000000000, 0.000000000, 0.000000000), Point::new(1.325630059, 0.469085985, 1.332577692), Point::new(2.570146731, 2.206223633, 0.195069931), Point::new(-1.325630059, -0.469085985, -1.332577692), Point::new(-0.746276779, -1.336710846, 1.164801264), Point::new(0.746276779, 1.336710846, -1.164801264), Point::new(-1.944735521, 2.054470144, 1.187278379), Point::new(1.944735521, -2.054470144, -1.187278379), Point::new(0.678466620, -1.065681723, 3.101855258), Point::new(-2.570146731, -2.206223633, -0.195069931), Point::new(-0.678466620, 1.065681723, -3.101855258), Point::new(2.526590044, 0.513987276, 3.321810977), Point::new(2.966293181, 0.300827717, 4.586154434), Point::new(4.066640217, 1.115608204, 5.019643701), Point::new(4.555658927, 0.993642715, 6.347404048), Point::new(5.592034018, 1.756296629, 6.772063430), Point::new(6.219755279, 2.633576371, 5.905084896), Point::new(5.784050247, 2.810241858, 4.617461434), Point::new(4.681083024, 2.021102304, 4.152665166), Point::new(4.166470443, 2.208132242, 2.803229638), Point::new(3.109428535, 1.427907442, 2.459648830), Point::new(2.304775574, 1.418091321, 1.205741997), Point::new(-1.197864717, 1.301837357, 0.744156336), Point::new(1.197864717, -1.301837357, -0.744156336), Point::new(1.422896146, -0.110783199, 2.587287416), Point::new(1.817921202, 2.165440619, -0.889455649), Point::new(-2.304775574, -1.418091321, -1.205741997), Point::new(-1.422896146, 0.110783199, -2.587287416), Point::new(-1.817921202, -2.165440619, 0.889455649), Point::new(-0.316674310, -1.640226154, 2.437974606), Point::new(0.316674310, 1.640226154, -2.437974606), Point::new(2.092850030, 3.025209060, -2.039004381), Point::new(-3.109428535, -1.427907442, -2.459648830), Point::new(-2.526590044, -0.513987276, -3.321810977), Point::new(-2.092850030, -3.025209060, 2.039004381), Point::new(-1.125893074, -2.693023688, 3.023185356), Point::new(1.125893074, 2.693023688, -3.023185356), Point::new(3.032787221, 3.963615652, -2.252537929), Point::new(-4.166470443, -2.208132242, -2.803229638), Point::new(-2.966293181, -0.300827717, -4.586154434), Point::new(-3.032787221, -3.963615652, 2.252537929), Point::new(-1.102939001, -3.290837919, 4.228124223), Point::new(1.102939001, 3.290837919, -4.228124223), Point::new(3.074488678, 4.621137560, -3.515275605), Point::new(-4.681083024, -2.021102304, -4.152665166), Point::new(-4.066640217, -1.115608204, -5.019643701), Point::new(-3.074488678, -4.621137560, 3.515275605), Point::new(-2.072647910, -4.267836251, 4.505075620), Point::new(2.072647910, 4.267836251, -4.505075620), Point::new(4.081165266, 5.542108047, -3.842800510), Point::new(-5.784050247, -2.810241858, -4.617461434), Point::new(-4.555658927, -0.993642715, -6.347404048), Point::new(-4.081165266, -5.542108047, 3.842800510), Point::new(-2.159032996, -4.915413242, 5.758983171), Point::new(2.159032996, 4.915413242, -5.758983171), Point::new(4.117087643, 6.140099933, -5.070216970), Point::new(-6.219755279, -2.633576371, -5.905084896), Point::new(-5.592034018, -1.756296629, -6.772063430), Point::new(-4.117087643, -6.140099933, 5.070216970), Point::new(-3.135965415, -5.807724190, 6.030315169), Point::new(3.135965415, 5.807724190, -6.030315169), Point::new(4.157910375, 0.335603689, 6.963119864), Point::new(5.882989410, 1.743238433, 7.708078134), Point::new(6.976294108, 3.134689673, 6.222174135), Point::new(6.233823220, 3.469456199, 4.031448750), Point::new(4.574977285, 2.853506729, 2.183500325), Point::new(2.574511349, -0.389269798, 5.152900609), Point::new(3.702838218, 4.171132487, -1.558152690), Point::new(-4.574977285, -2.853506729, -2.183500325), Point::new(-2.574511349, 0.389269798, -5.152900609), Point::new(-3.702838218, -4.171132487, 1.558152690), Point::new(-0.437326277, -3.047894249, 4.902440781), Point::new(0.437326277, 3.047894249, -4.902440781), Point::new(4.765210163, 5.766667805, -3.162864912), Point::new(-6.233823220, -3.469456199, -4.031448750), Point::new(-4.157910375, -0.335603689, -6.963119864), Point::new(-4.765210163, -5.766667805, 3.162864912), Point::new(-1.493995424, -4.703759796, 6.465409739), Point::new(1.493995424, 4.703759796, -6.465409739), Point::new(4.835370554, 6.792188800, -5.290975340), Point::new(-6.976294108, -3.134689673, -6.222174135), Point::new(-5.882989410, -1.743238433, -7.708078134), Point::new(-4.835370554, -6.792188800, 5.290975340), Point::new(-3.170571386, -6.235112964, 6.913348529), 
    Point::new(3.170571386, 6.235112964, -6.913348529));
    let cos = get_centre_of_symmetry(&coords);
    /* let planar = is_planar(&coords, 0.1);

    match planar {
        Some(plane) => println!("{:?} {:?}", plane, deviation_from_plane(&coords, plane)),
        None => println!("{:?}", deviation_from_plane(&coords, Plane::from_three_points(coords[0], coords[1], coords[3]).expect("msg")))
    } */

    println!("{:?}", shortest_atom_distance(&coords));

    //println!("{:?}", has_planar_element(&coords, cos, 0.29));

    //println!("{:?}", has_plane_reflection_symmetry(&coords, &Plane::new(get_centre_of_symmetry(&coords), lines[2].vector).expect("msg"), 0.2));
    //println!("{:?} {:?}", points_into_coordinates(coords), lines[2].compute_point(10.0))

    let plane = Plane { point: Point { x: 6.74565888379842e-17, y: 2.2485529612661398e-17, z: 1.1242764806330699e-17 }, normal: Vector { x: -0.6360664548953232, y: 0.6794235708609495, z: 0.3657910282052473 } };
    //let plane = Plane::from_three_points(cos, coords[5], coords[6]).unwrap();
    let deviations = deviation_from_plane(&coords, plane);
    //let deviations = deviation_from_reflection_symmetry(&coords, plane);
    println!("{:?} <- {:?}", deviations.iter().fold(0.0, |max, val| if val > &max {*val} else {max}), deviations);

    println!("");

    let vector = Plane::from_three_points(cos, coords[1], coords[4]).unwrap().normal.normalise();
    //let vector = Vector::from_two_points(coords[6], coords[7]);
    //let vector =Vector { x: -0.6360664548953232, y: 0.6794235708609495, z: 0.3657910282052473 };
    let deviations = deviation_from_rotation_symmetry(&coords, Line::new(cos, vector), 4.0);
    println!("{:?} <- {:?}, {:?}", deviations.iter().fold(0.0, |max, val| if val > &max {*val} else {max}), deviations, vector);
    println!("");
    /* let pp = Plane::from_three_points(cos, coords[6], coords[8]).unwrap();
    for (i, p1) in coords.iter().enumerate() {
        for p2 in coords[i+1..].iter() {
            if pp.approx_has_point(*p1, 0.3) && pp.approx_has_point(*p2, 0.3) {
                let v = Plane::from_three_points(cos, *p1, *p2).unwrap().normal.normalise();
                let devs = deviation_from_rotation_symmetry(&coords, Line::new(cos, v), 4.0);
                println!("{:?}, {:?}", devs.iter().fold(0.0, |max, val| if val > &max {*val} else {max}), v);
            }
            
        }
    } */

    //Line { point: Point { x: 7.1446236518, y: 9.656128203933331, z: 4.7408198414000005 }, vector: Vector { x: -0.3112557392670835, y: 0.5601211141467458, z: 1.8173851621853414 } }
    /* for (i, c) in coords.iter().enumerate() {
        let v = Vector::from_two_points(cos, *c);

        /* for cc in coords[i+1..].iter() {
            let vv = Vector::from_two_points(cos, *cc);
            println!("{:?}", v.angle_degrees(vv));
        } */
        println!("{:?}", v.angle_degrees(Vector { x: 1.2527473282125494, y: -0.013485584329648914, z: -1.5910145769789892 }))
    } */

    println!("{:?}", Vector { x: 0.4414056643594077, y: -0.3491979438171334, z: -0.8265723413623977 }.rotate_vector(Vector { x: 0.22652753210875531, y: -0.8449119670671081, z: 0.4845709907779322 }, 4.0))
}